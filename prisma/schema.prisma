generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model PageContent {
  id       String @id @default(cuid())
  content  Json
  pageType String @unique

  @@schema("public")
}

model Product {
  id   String  @id @default(cuid())
  name String
  slug String? @unique
  type String? // e.g., "T-SHIRT"

  // Pricing
  price         Float
  originalPrice Float?
  discount      Int?   @default(0) // percentage

  // Description and content
  description  String?
  aboutProduct String[] // Array of bullet points

  // SEO and metadata
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]

  // Product details
  sku           String  @unique
  inStock       Boolean @default(true)
  stockQuantity Int?    @default(0)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  active Boolean @default(false)

  // Relations
  images         String[]
  colors         ProductColor[]
  sizes          ProductSize[]
  tags           ProductTag[]
  reviews        Review[]
  features       ProductFeature[]
  specifications ProductSpecification[]
  cartItems      CartItem[]
  orderItems     OrderItem[]

  stripeProductId String? @unique
  stripePriceId   String? @unique

  // Computed fields (handled in application layer)
  // rating: calculated from reviews
  // reviewCount: count of reviews

  @@index([createdAt])
  @@index([categoryId])
  @@map("products")
  @@schema("public")
}

// Product colors
model ProductColor {
  id        String  @id @default(cuid())
  name      String // e.g., "Gray", "Pink"
  hexColor  String // e.g., "#8B8B8B"
  sortOrder Int     @default(0)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_colors")
  @@schema("public")
}

// Product sizes
model ProductSize {
  id        String  @id @default(cuid())
  size      String
  sortOrder Int     @default(0)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_sizes")
  @@schema("public")
}

// Categories master table
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  products    Product[]

  @@map("categories")
  @@schema("public")
}

// Product tags (many-to-many through junction table)
model ProductTag {
  id        String  @id @default(cuid())
  productId String
  tagId     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@map("product_tags")
  @@schema("public")
}

// Tags master table
model Tag {
  id       String       @id @default(cuid())
  name     String       @unique
  products ProductTag[]

  @@map("tags")
  @@schema("public")
}

// Product features
model ProductFeature {
  id          String  @id @default(cuid())
  title       String
  description String
  icon        String? // SVG path or icon identifier
  sortOrder   Int     @default(0)
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_features")
  @@schema("public")
}

// Product specifications (key-value pairs)
model ProductSpecification {
  id        String  @id @default(cuid())
  key       String
  value     String
  sortOrder Int     @default(0)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specifications")
  @@schema("public")
}

// Reviews and ratings
model Review {
  id        String   @id @default(cuid())
  title     String
  content   String
  rating    Int // 1-5
  variant   String? // e.g., "Yellow / XL"
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productId String
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String        @db.Uuid
  images    ReviewImage[]

  @@map("reviews")
  @@schema("public")
}

// Review images
model ReviewImage {
  id       String  @id @default(cuid())
  url      String
  alt      String?
  reviewId String
  review   Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_images")
  @@schema("public")
}

// Shopping cart (optional - for complete e-commerce)
model Cart {
  id        String     @id @default(cuid())
  userId    String? // nullable for guest carts
  sessionId String? // for guest carts
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  @@map("carts")
  @@schema("public")
}

// Cart items
model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(1)

  // Product variant details
  selectedColor String?
  selectedSize  String?

  // Relations
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, selectedColor, selectedSize])
  @@map("cart_items")
  @@schema("public")
}

// Orders (optional - for complete e-commerce)
model Order {
  id                    String      @id @default(cuid())
  stripeSessionId       String      @unique
  stripePaymentIntent   String?
  deliveryStatus        OrderStatus @default(PENDING)
  status                String // e.g., 'complete', 'pending'
  currency              String
  amountSubtotal        Int
  amountTotal           Int
  customerName          String
  customerEmail         String
  customerPhone         String?
  customerAddressLine1  String?
  customerAddressLine2  String?
  customerCity          String?
  customerState         String?
  customerPostalCode    String?
  customerCountry       String?
  deliveryInstructions  String? // from custom_fields
  landmark              String? // from custom_fields
  preferredDeliveryTime String? // from custom_fields
  orderType             String? // from metadata
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  items OrderItem[]

  @@map("orders")
  @@schema("public")
}

// Order status
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED

  @@schema("public")
}

// Order items
model OrderItem {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
  productName String
  quantity    Int
  unitPrice   Int
  totalPrice  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
  @@schema("public")
}

model Blog {
  id              String         @id @default(cuid())
  title           String         @db.VarChar(200)
  content         String
  excerpt         String?        @db.VarChar(300)
  categories      String[] // array of category names
  tags            String[] // array of tag names (optional)
  featuredImage   String? // allow null for optional/empty string
  status          BlogStatus
  metaDescription String?        @db.VarChar(160)
  slug            String?        @unique
  visibility      BlogVisibility

  createdAt DateTime @default(now())

  @@schema("public")
}

enum BlogStatus {
  draft
  published

  @@schema("public")
}

enum BlogVisibility {
  public
  private

  @@schema("public")
}
